#+TITLE: Emacs Configuration
#+ORIGNAL:Harry R. Schwartz
#+AUTHOR: MattLu
#+EMAIL: lu.man@outlook.com
#+OPTIONS: toc:nil num:nil
[[https://github.com/hrs/dotfiles][Harry R. Schwartz]]
* Use sensible-defaults.el

Use [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]] for some basic settings.

#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
  (sensible-defaults/use-all-keybindings)
  (sensible-defaults/backup-to-temp-directory)
#+END_SRC

* Configure =use-package=

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (setq use-package-verbose t)
  (setq use-package-always-ensure t)

  (require 'use-package)
#+END_SRC

use auto-package-update to keep your packages updated automatically

#+BEGIN_SRC emacs-lisp
(use-package auto-package-update
  :config
  (setq auto-package-update-delete-old-versions t)
  (setq auto-package-update-hide-results t)
  (auto-package-update-maybe))
#+END_SRC

Always compile packages, and use the newest version available.

#+BEGIN_SRC emacs-lisp
  (use-package auto-compile
    :config (auto-compile-on-load-mode)
    (setq load-prefer-newer t))
#+END_SRC

* Set personal information

** Who am I? Where am I?

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "MattLu"
        user-mail-address "lu.man@outlook.com"
        calendar-latitude 39.97
        calendar-longitude 116.34
        calendar-location-name "zhongkeyuanQingniangongyu H2209")
#+END_SRC

** COMMENT Access my netrc data

#+BEGIN_SRC emacs-lisp
  (require 'netrc)

  (setq netrc-file "~/.netrc")

  (defun netrc-username (machine)
    "Helper function to extract a username from my netrc."
    (car (netrc-credentials machine)))

  (defun netrc-password (machine)
    "Helper function to extract a password from my netrc."
    (cadr (netrc-credentials machine)))
#+END_SRC

* Add =resources= to =load-path=

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/resources/")
#+END_SRC

* Utility functions

Define a big ol' bunch of handy utility functions.

#+BEGIN_SRC emacs-lisp
  (defun MattLu/view-buffer-name ()
    "Display the filename of the current buffer."
    (interactive)
    (message (buffer-file-name)))

  (defun MattLu/rename-file (new-name)
    (interactive "FNew name: ")
    (let ((filename (buffer-file-name)))
      (if filename
          (progn
            (when (buffer-modified-p)
               (save-buffer))
            (rename-file filename new-name t)
            (kill-buffer (current-buffer))
            (find-file new-name)
            (message "Renamed '%s' -> '%s'" filename new-name))
        (message "Buffer '%s' isn't backed by a file!" (buffer-name)))))

  (defun MattLu/generate-scratch-buffer ()
    "Create and switch to a temporary scratch buffer with a random
       name."
    (interactive)
    (switch-to-buffer (make-temp-name "scratch-")))

  (defun MattLu/de-unicode ()
    "Tidy up a buffer by replacing all special Unicode characters
       (smart quotes, etc.) with their more sane cousins"
    (interactive)
    (let ((unicode-map '(("[\u2018\|\u2019\|\u201A\|\uFFFD]" . "'")
                         ("[\u201c\|\u201d\|\u201e]" . "\"")
                         ("\u2013" . "--")
                         ("\u2014" . "---")
                         ("\u2026" . "...")
                         ("\u00A9" . "(c)")
                         ("\u00AE" . "(r)")
                         ("\u2122" . "TM")
                         ("[\u02DC\|\u00A0]" . " "))))
      (save-excursion
        (loop for (key . value) in unicode-map
              do
              (goto-char (point-min))
              (replace-regexp key value)))))

  (defun MattLu/beautify-json ()
    "Pretty-print the JSON in the marked region. Currently shells
       out to `jsonpp'--be sure that's installed!"
    (interactive)
    (save-excursion
      (shell-command-on-region (mark) (point) "jsonpp" (buffer-name) t)))

  (defun MattLu/unfill-paragraph ()
    "Takes a multi-line paragraph and makes it into a single line of text."
    (interactive)
    (let ((fill-column (point-max)))
      (fill-paragraph nil)))

  (defun MattLu/kill-current-buffer ()
    "Kill the current buffer without prompting."
    (interactive)
    (kill-buffer (current-buffer)))

  (defun MattLu/visit-last-dired-file ()
    "Open the last file in an open dired buffer."
    (end-of-buffer)
    (previous-line)
    (dired-find-file))

  (defun MattLu/visit-last-migration ()
    "Open the last file in 'db/migrate/'. Relies on projectile. Pretty sloppy."
    (interactive)
    (dired (expand-file-name "db/migrate" (projectile-project-root)))
    (MattLu/visit-last-dired-file)
    (kill-buffer "migrate"))

  (defun MattLu/add-auto-mode (mode &rest patterns)
    "Add entries to `auto-mode-alist' to use `MODE' for all given file `PATTERNS'."
    (dolist (pattern patterns)
      (add-to-list 'auto-mode-alist (cons pattern mode))))

  (defun MattLu/find-file-as-sudo ()
    (interactive)
    (let ((file-name (buffer-file-name)))
      (when file-name
        (find-alternate-file (concat "/sudo::" file-name)))))

  (defun MattLu/region-or-word ()
    (if mark-active
        (buffer-substring-no-properties (region-beginning)
                                        (region-end))
      (thing-at-point 'word)))

  (defun MattLu/insert-random-string (len)
    "Insert a random alphanumeric string of length len."
    (interactive)
    (let ((mycharset "1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstyvwxyz"))
      (dotimes (i len)
        (insert (elt mycharset (random (length mycharset)))))))

  (defun MattLu/generate-password ()
    "Insert a good alphanumeric password of length 30."
    (interactive)
    (MattLu/insert-random-string 30))

  (defun MattLu/append-to-path (path)
    "Add a path both to the $PATH variable and to Emacs' exec-path."
    (setenv "PATH" (concat (getenv "PATH") ":" path))
    (add-to-list 'exec-path path))
#+END_SRC

* UI preferences
** Tweak window chrome

I don't usually use the menu or scroll bar, and they take up useful space.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode -1)
#+END_SRC

The default frame title isn't useful. This binds it to the name of the current
project:

#+BEGIN_SRC emacs-lisp
  (use-package projectile
  :config
  (setq frame-title-format '((:eval (projectile-project-name)))))
#+END_SRC

** Use fancy lambdas

Why not?

#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC

** Load up a theme

I'm currently using the "nord" theme. I've got a scenic wallpaper, so just a
hint of transparency looks lovely and isn't distracting or hard to read.

#+BEGIN_SRC emacs-lisp
  (defun transparency (value)
    "Sets the transparency of the frame window. 0=transparent/100=opaque."
    (interactive "nTransparency Value 0 - 100 opaque:")
    (set-frame-parameter (selected-frame) 'alpha value))

  (defun MattLu/apply-theme ()
    "Apply the `nord' theme and make frames just slightly transparent."
    (interactive)
    (load-theme 'nord t)
    (transparency 96))
#+END_SRC

If this code is being evaluated by =emacs --daemon=, ensure that each subsequent
frame is themed appropriately.

#+BEGIN_SRC emacs-lisp
  (use-package nord-theme
  :config
  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  (with-selected-frame frame (MattLu/apply-theme))))
    (MattLu/apply-theme)))
#+END_SRC

** Configure =powerline=

#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :ensure t
    :config
    (powerline-center-theme))
#+end_SRC

 Powerline in terminal may not using the right color
#+BEGIN_SRC emacs-lisp
 (set-face-attribute 'mode-line-inactive  t :background "black")
 (set-face-attribute 'powerline-inactive1 nil :background "brightblack")
 (set-face-attribute 'powerline-inactive2 nil :background "brightblack")
#+END_SRC


** COMMENT Disable visual bell

=sensible-defaults= replaces the audible bell with a visual one, but I really
don't even want that (and my Emacs/Mac pair renders it poorly). This disables
the bell altogether.

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** Scroll conservatively

When point goes outside the window, Emacs usually recenters the buffer point.
I'm not crazy about that. This changes scrolling behavior to only scroll as far
as point goes.

#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

** Set default font and configure font resizing

I'm partial to Inconsolata.

The standard =text-scale-= functions just resize the text in the current buffer;
I'd generally like to resize the text in /every/ buffer, and I usually want to
change the size of the modeline, too (this is especially helpful when
presenting). These functions and bindings let me resize everything all together!

Note that this overrides the default font-related keybindings from
=sensible-defaults=.

#+BEGIN_SRC emacs-lisp
    (setq MattLu/default-font "Ubuntu Mono")
    (setq MattLu/default-font-size 11)
    (setq MattLu/current-font-size MattLu/default-font-size)

    (setq MattLu/font-change-increment 1.1)

    (defun MattLu/font-code ()
      "Return a string representing the current font (like \"Inconsolata-14\")."
      (concat MattLu/default-font "-" (number-to-string MattLu/current-font-size)))

    (defun MattLu/set-font-size ()
      "Set the font to `MattLu/default-font' at `MattLu/current-font-size'.
    Set that for the current frame, and also make it the default for
    other, future frames."
      (let ((font-code (MattLu/font-code)))
        (add-to-list 'default-frame-alist (cons 'font font-code))
        (set-frame-font font-code)))

    (defun MattLu/reset-font-size ()
      "Change font size back to `MattLu/default-font-size'."
      (interactive)
      (setq MattLu/current-font-size MattLu/default-font-size)
      (MattLu/set-font-size))

    (defun MattLu/increase-font-size ()
      "Increase current font size by a factor of `MattLu/font-change-increment'."
      (interactive)
      (setq MattLu/current-font-size
            (ceiling (* MattLu/current-font-size MattLu/font-change-increment)))
      (MattLu/set-font-size))

    (defun MattLu/decrease-font-size ()
      "Decrease current font size by a factor of `MattLu/font-change-increment', down to a minimum size of 1."
      (interactive)
      (setq MattLu/current-font-size
            (max 1
                 (floor (/ MattLu/current-font-size MattLu/font-change-increment))))
      (MattLu/set-font-size))

    (define-key global-map (kbd "C-)") 'MattLu/reset-font-size)
    (define-key global-map (kbd "C-+") 'MattLu/increase-font-size)
  ;;  (define-key global-map (kbd "C-=") 'MattLu/increase-font-size)
;;    (define-key global-map (kbd "C-c -") 'MattLu/decrease-font-size)
  ;; (define-key global-map (kbd "C--") nil)

    (MattLu/reset-font-size)
#+END_SRC

** Maintain consistent line height with Unicode characters

Depending on the font, including a Unicode character on a line sometimes makes
that line bizarrely huge, which is super ugly. My preferred font (Inconsolata)
doesn't seem to handle Unicode especially well.

Luckily, the =unicode-fonts= package can totally mitigate this problem! I don't
really know how it works, but I can't argue with the results.

#+BEGIN_SRC emacs-lisp
(use-package unicode-fonts
   :config
   (unicode-fonts-setup))
#+END_SRC

** Highlight the current line

=global-hl-line-mode= softly highlights the background color of the line
containing point. It makes it a bit easier to find point, and it's useful when
pairing or presenting code.

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode)
#+END_SRC

** Hide certain modes from the modeline

I'd rather have only a few necessary mode identifiers on my modeline. This
either hides or "renames" a variety of major or minor modes using the =diminish=
package.

#+BEGIN_SRC emacs-lisp
 (use-package diminish)
 (defmacro diminish-minor-mode (filename mode &optional abbrev)
    `(eval-after-load (symbol-name ,filename)
       '(diminish ,mode ,abbrev)))

  (defmacro diminish-major-mode (mode-hook abbrev)
    `(add-hook ,mode-hook
               (lambda () (setq mode-name ,abbrev))))

  (diminish-minor-mode 'abbrev 'abbrev-mode)
  (diminish-minor-mode 'simple 'auto-fill-function)
  (diminish-minor-mode 'company 'company-mode)
  (diminish-minor-mode 'eldoc 'eldoc-mode)
  (diminish-minor-mode 'flycheck 'flycheck-mode)
  (diminish-minor-mode 'flyspell 'flyspell-mode)
  (diminish-minor-mode 'global-whitespace 'global-whitespace-mode)
  (diminish-minor-mode 'projectile 'projectile-mode)
  (diminish-minor-mode 'ruby-end 'ruby-end-mode)
  (diminish-minor-mode 'subword 'subword-mode)
  (diminish-minor-mode 'undo-tree 'undo-tree-mode)
  (diminish-minor-mode 'yard-mode 'yard-mode)
  (diminish-minor-mode 'yasnippet 'yas-minor-mode)
  (diminish-minor-mode 'wrap-region 'wrap-region-mode)

  (diminish-minor-mode 'paredit 'paredit-mode " π")

  (diminish-major-mode 'emacs-lisp-mode-hook "el")
  (diminish-major-mode 'haskell-mode-hook "λ=")
  (diminish-major-mode 'lisp-interaction-mode-hook "λ")
  (diminish-major-mode 'python-mode-hook "Py")
#+END_SRC

** Highlight uncommitted changes

Use the =diff-hl= package to highlight changed-and-uncommitted lines when
programming.

#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
   :hook ((prog-mode vc-dir-mode) . turn-on-diff-hl-mode))
 #+END_SRC

** Change frame apperience

Change the frame alpha .

#+BEGIN_SRC emacs-lisp
  (defun MattLu/change-frame-alpha ()
    (set-frame-parameter (selected-frame) 'alpha '(96 96))
    (add-to-list 'default-frame-alist '(alpha 96 96)))
#+END_SRC

If emacs shwo on GUI, than apply this code.

#+BEGIN_SRC emacs-lisp
  (if (display-graphic-p)
      (MattLu/change-frame-alpha))
#+END_SRC

** Set Emacs background color

#+BEGIN_SRC emacs-lisp
  (set-face-background 'default "dark")
#+END_SRC

** Display line number

#+BEGIN_SRC emacs-lisp
  (setq display-line-numbers-type 'visual)
  (global-display-line-numbers-mode)
#+END_SRC

* Programming customization
** common settings
*** Editing
I like shallow indentation, but tabs are displayed as 8 characters by default.
This reduces that.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
#+END_SRC

Treating terms in CamelCase symbols as separate words makes editing a little
easier for me, so I like to use =subword-mode= everywhere.

#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC

Compilation output goes to the =*compilation*= buffer. I rarely have that window
selected, so the compilation output disappears past the bottom of the window.
This automatically scrolls the compilation window so I can always see the
output.

#+BEGIN_SRC emacs-lisp
  (setq compilation-scroll-output t)
#+END_SRC

*** Complete engines

YouCompltedMe setup
#+BEGIN_SRC emacs-lisp
  (use-package ycmd
    :init
    (add-hook 'after-init-hook #'global-ycmd-mode)
    :config
    (set-variable 'ycmd-server-command `("python3" "-u" ,(file-truename "~/Matt_Installed_package/ycmd/ycmd")))
    (set-variable 'ycmd-global-config (file-truename "~/Matt_Installed_package/ycmd/.ycm_extra_conf.py")))

   (use-package company-ycmd
     :init
     (company-ycmd-setup))

   (use-package flycheck-ycmd
     :config
     (flycheck-ycmd-setup)
     ((when (not (display-graphic-p))
        (setq flycheck-indication-mode nil)))
     :requires flycheck)
#+END_SRC

*** Show function name

To show the function in the HeaderLine
#+BEGIN_SRC emacs-lisp
  (use-package which-func
    :init
    (which-function-mode)
    (setq which-func-unknown "n/a")
    ;;  Show the current function name in the header line
    (setq mode-line-format (delete (assoc 'which-func-mode
                                        mode-line-format) mode-line-format)
          which-func-header-line-format '(which-func-mode ("" which-func-format)))
    (defadvice which-func-ff-hook (after header-line activate)
      (when which-func-mode
        (setq mode-line-format (delete (assoc 'which-func-mode
                                              mode-line-format) mode-line-format)
              header-line-format which-func-header-line-format))))
#+END_SRC

Emacs has a minor mode called hs-minor-mode that allows users to fold and hide blocks of text
#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-common-hook   'hs-minor-mode)
#+END_SRC

format-all for Emacs
#+BEGIN_SRC emacs-lisp
  (use-package format-all)
#+END_SRC

*** Highlight variables

#+BEGIN_SRC emacs-lisp
  (use-package symbol-overlay
    :diminish
    :bind (("M-i" . symbol-overlay-put)
           ("M-n" . symbol-overlay-jump-next)
           ("M-p" . symbol-overlay-jump-prev)
           ("M-N" . symbol-overlay-switch-forward)
           ("M-P" . symbol-overlay-switch-backward)
           ("M-C" . symbol-overlay-remove-all))
    :hook (prog-mode . symbol-overlay-mode))
#+END_SRC

** C++

   Use =rtags=
#+BEGIN_SRC emacs-lisp
  (use-package company-rtags
    :init
    (push  'company-rtags company-backends))
  (use-package rtags
    :config
    (setq rtags-autostart-diagnostics t)
    (rtags-diagnostics)
    (setq rtags-completions-enabled t)
    :init
    (add-hook 'c-mode-hook 'rtags-start-process-unless-running)
    (add-hook 'c++-mode-hook 'rtags-start-process-unless-running))
#+END_SRC

   Use =company-irony=
#+BEGIN_SRC emacs-lisp
  (use-package company-irony
    :init
    (push 'company-irony company-backends)
    :requires company)
#+END_SRC

   Use =company-c-headers=
#+BEGIN_SRC emacs-lisp
  (use-package company-c-headers
    :init
    (push 'company-c-headers company-backends)
    :requires company)
#+END_SRC

  Use =smartparens=
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :init
    (smartparens-global-mode 1))
#+END_SRC

** Coq

Use =company-coq-mode=, which really helps make Proof General a more useful IDE.

I also like to disable =abbrev-mode=; it has a ton of abbreviations for Coq, but
they've always been unpleasant surprises for me.

#+BEGIN_SRC emacs-lisp
  (use-package company-coq
    :init
    (add-hook 'coq-mode-hook
              (lambda ()
                (company-coq-mode)
                (abbrev-mode 0)))
    :requires proof-general)
#+END_SRC

The default Proof General layout stacks the code, goal, and response buffers on
top of each other. I like to keep my code on one side and my goal and response
buffers on the other.

#+BEGIN_SRC emacs-lisp
  (setq proof-three-window-mode-policy 'hybrid)
#+END_SRC

The Proof General splash screen's pretty cute, but I don't need to see it every
time.

#+BEGIN_SRC emacs-lisp
  (setq proof-splash-enable nil)
#+END_SRC

** CSS and Sass

Indent 2 spaces.

#+BEGIN_SRC emacs-lisp
  (use-package css-mode
    :config
    (setq css-indent-offset 2))
#+END_SRC

Don't compile the current SCSS file every time I save.

#+BEGIN_SRC emacs-lisp
  (use-package scss-mode
    :config
    (setq scss-compile-at-save nil))
#+END_SRC

** COMMENT Golang

Define my =$GOPATH= and tell Emacs where to find the Go binaries.

#+BEGIN_SRC emacs-lisp
  (setenv "GOPATH" "/home/MattLu/code/go")
  (MattLu/append-to-path (concat (getenv "GOPATH") "/bin"))
#+END_SRC

Run =goimports= on every file when saving, which formats the file and
automatically updates the list of imports. This requires that the =goimports=
binary is installed.

#+BEGIN_SRC emacs-lisp
  (setq gofmt-command "goimports")
  (add-hook 'before-save-hook 'gofmt-before-save)
#+END_SRC

When I open a Go file,

- Start up =company-mode= with the Go backend. This requires that the =gocode=
  binary is installed,
- Redefine the default =compile= command to something Go-specific, and
- Enable =flycheck=.

#+BEGIN_SRC emacs-lisp
  (add-hook 'go-mode-hook
            (lambda ()
              (set (make-local-variable 'company-backends)
                   '(company-go))
              (company-mode)
              (if (not (string-match "go" compile-command))
                  (set (make-local-variable 'compile-command)
                       "go build -v && go test -v && go vet"))
              (flycheck-mode)))
#+END_SRC

** Haskell

Enable =haskell-doc-mode=, which displays the type signature of a function, and
use smart indentation.

#+BEGIN_SRC emacs-lisp
;;  (MattLu/append-to-path "~/.cabal/bin")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :init
    (add-hook 'haskell-mode-hook
              (lambda ()
                (haskell-doc-mode)
                (interactive-haskell-mode)
                (turn-on-haskell-indent))))
#+END_SRC

** JavaScript and CoffeeScript

Indent everything by 2 spaces.

#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2)

  (add-hook 'coffee-mode-hook
            (lambda ()
              (yas-minor-mode 1)
              (setq coffee-tab-width 2)))
#+END_SRC

** Lisps

All the lisps have some shared features, so we want to do the same things for
all of them. That includes using =paredit-mode= to balance parentheses (and
more!), =rainbow-delimiters= to color matching parentheses, and highlighting the
whole expression when point is on a paren.

#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :hook ((clojure-mode
          emacs-lisp-mode
          lisp-mode
          scheme-mode) . paredit-mode))

  (use-package rainbow-delimiters
    :hook ((clojure-mode
          emacs-lisp-mode
          lisp-mode
          scheme-mode) . rainbow-delimiters-mode))
#+END_SRC

If I'm writing in Emacs lisp I'd like to use =eldoc-mode= to display
documentation.

#+BEGIN_SRC emacs-lisp
 (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
#+END_SRC

My own silly language ([[https://github.com/hrs/blueprint][blueprint]]) is close enough to Scheme that it can use the
same mode.

#+BEGIN_SRC emacs-lisp
  (MattLu/add-auto-mode 'scheme-mode "\\.blu$")
#+END_SRC

** Magit


I bring up the status menu with =C-x g=.

Use =evil= keybindings with =magit=.

The default behavior of =magit= is to ask before pushing. I haven't had any
problems with accidentally pushing, so I'd rather not confirm that every time.

Per [[http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html][tpope's suggestions]], highlight commit text in the summary line that goes
beyond 50 characters.

Enable spellchecking when writing commit messages.

I sometimes use =git= from the terminal, and I'll use =emacsclient --tty= to
write commits. I'd like to be in the insert state when my editor pops open for
that.

I'd like to start in the insert state when writing a commit message.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status)
    :config
    (setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50)
    (setq magit-refresh-status-buffer nil)
    (setq auto-revert-buffer-list-filter
        'magit-auto-revert-repository-buffers-p)
    (setq magit-diff-refine-hunk nil)
    (setq magit-highlight-indentation nil)
    (setq magit-highlight-trailing-whitespace nil)
    (setq magit-highlight-whitespace nil)
    (setq magit-use-overlays t)
    (add-hook 'git-commit-mode-hook 'turn-on-flyspell))
#+END_SRC

** Projectile

Projectile's default binding of =projectile-ag= to =C-c p s s= is clunky enough
that I rarely use it (and forget it when I need it). This binds the
easier-to-type =C-c C-v= and =C-c v= to useful searches.

When I visit a project with =projectile-switch-project=, the default action is
to search for a file in that project. I'd rather just open up the top-level
directory of the project in =dired= and find (or create) new files from there.

I'd like to /always/ be able to recursively fuzzy-search for files, not just
when I'm in a Projecile-defined project. This uses the current directory as a
project root (if I'm not in a "real" project).

#+BEGIN_SRC emacs-lisp

  (use-package projectile
     :init
     (defun MattLu/search-project-for-symbol-at-point ()
     "Use `projectile-ag' to search the current project for `symbol-at-point'."
          (interactive)
          (projectile-ag (projectile-symbol-at-point)))

     :bind (("C-c v" . projectile-ag)
            ( "C-c C-v" . MattLu/search-project-for-symbol-at-point))
     :config

     (setq projectile-switch-project-action 'projectile-dired)
     (setq projectile-require-project-root nil))
#+END_SRC

** Python

#+BEGIN_SRC emacs-lisp
  (use-package virtualenvwrapper
    :init
    (venv-initialize-interactive-shells) ;; if you want interactive shell support
    (venv-initialize-eshell) ;; if you want eshell support
    (setq venv-location "~/EnvPy/"))
#+END_SRC


Set ipython as interpreter

#+BEGIN_SRC emacs-lisp
  (setq python-shell-interpreter "ipython")
  (setq python-shell-interpreter-args "--simple-prompt -i")
  (setq py-ipython-command-args "--simple-prompt -i")
#+END_SRC

Indent 2 spaces.

#+BEGIN_SRC emacs-lisp
  (setq python-indent 4)
#+END_SRC


Using jedi as python backend

#+BEGIN_SRC emacs-lisp
  (use-package company-jedi
    :bind ("C-c d" . jedi:show-doc)
    :init
    (push 'company-jedi company-backends)
    :config
    (setq jedi:complete-on-dot t))

  (setq python-shell-completion-native-enable nil) ;; disable warring in python promote bug
#+END_SRC

set realgud python debug command
#+BEGIN_SRC emacs-lisp
  (setq realgud:pdb-command-name "python -m pdb")
#+END_SRC

** MATLAB
#+BEGIN_SRC emacs-lisp
  (use-package matlab-mode
    :no-require t
    :config
    (setq matlab-indent-function t)
    (setq matlab-shell-command "/data/mat/MATLAB/R2017b/bin/matlab"))
#+END_SRC

** =sh=

Indent with 2 spaces.

#+BEGIN_SRC emacs-lisp
  (add-hook 'sh-mode-hook
            (lambda ()
              (setq sh-basic-offset 2
                    sh-indentation 2)))
#+END_SRC

** COMMENT Slim

If I'm editing Slim templates I'm probably in a Rails project. In that case, I'd
like to still be able to run my tests from a Slim buffer.

#+BEGIN_SRC emacs-lisp
  (add-hook 'slim-mode-hook 'rspec-mode)
#+END_SRC

** =web-mode=

If I'm in =web-mode=, I'd like to:

- Color color-related words with =rainbow-mode=.
- Still be able to run RSpec tests from =web-mode= buffers.
- Indent everything with 2 spaces.

#+BEGIN_SRC emacs-lisp
 (use-package web-mode
    :init
    (use-package rainbow-mode)
    (use-package rspec-mode)
    :config
    (add-hook 'web-mode-hook 'rainbow-mode)
    (add-hook 'web-mode-hook 'rspec-mode)
    (setq web-mode-markup-indent-offset 2)
    :mode "\\.erb$"
           "\\.html$"
           "\\.php$"
           "\\.rhtml$")
#+END_SRC

Use =web-mode= with embedded Ruby files, regular HTML, and PHP.

** Tags

   using GNU Global to generate Tags
#+BEGIN_SRC emacs-lisp
  (use-package ggtags
    :hook ((c-mode c++-mode java-mode) . ggtags-mode)
    :config
    ;; Remove the default binding for `M-o' in `ggtags-navigation-map'
    (bind-key "M-o" nil ggtags-navigation-map))
#+END_SRC
** protocol buffer

   add Google protocol buffer support
#+BEGIN_SRC emacs-lisp
  (use-package protobuf-mode)
#+END_SRC
** jump and tags

Rtags fall back to other taggers
#+BEGIN_SRC emacs-lisp
  (defun use-rtags (&optional useFileManager)
    (and (rtags-executable-find "rc")
         (cond ((not (gtags-get-rootpath)) t)
               ((and (not (eq major-mode 'c++-mode))
                     (not (eq major-mode 'c-mode))) (rtags-has-filemanager))
               (useFileManager (rtags-has-filemanager))
               (t (rtags-is-indexed)))))

  (defun tags-find-symbol-at-point (&optional prefix)
    (interactive "P")
    (if (and (not (rtags-find-symbol-at-point prefix)) rtags-last-request-not-indexed)
        (gtags-find-tag)))
  (defun tags-find-references-at-point (&optional prefix)
    (interactive "P")
    (if (and (not (rtags-find-references-at-point prefix)) rtags-last-request-not-indexed)
        (gtags-find-rtag)))
  (defun tags-find-symbol ()
    (interactive)
    (call-interactively (if (use-rtags) 'rtags-find-symbol 'gtags-find-symbol)))
  (defun tags-find-references ()
    (interactive)
    (call-interactively (if (use-rtags) 'rtags-find-references 'gtags-find-rtag)))
  (defun tags-find-file ()
    (interactive)
    (call-interactively (if (use-rtags t) 'rtags-find-file 'gtags-find-file)))
  (defun tags-imenu ()
    (interactive)
    (call-interactively (if (use-rtags t) 'rtags-imenu 'idomenu)))

  (define-key c-mode-base-map (kbd "M-.") (function tags-find-symbol-at-point))
  (define-key c-mode-base-map (kbd "M-,") (function tags-find-references-at-point))
  (define-key c-mode-base-map (kbd "M-;") (function tags-find-file))
  (define-key c-mode-base-map (kbd "C-.") (function tags-find-symbol))
  (define-key c-mode-base-map (kbd "C-,") (function tags-find-references))
  (define-key c-mode-base-map (kbd "C-<") (function rtags-find-virtuals-at-point))
;;  (define-key c-mode-base-map (kbd "M-i") (function tags-imenu))
#+END_SRC
** imenu-list

show function and variable tree in side buffer
#+BEGIN_SRC emacs-lisp
  (use-package imenu-list
    :bind ("C-c i" . imenu-list-minor-mode)
    :config
    (setq imenu-list-focus-after-activation t))
#+END_SRC
** =GDB=

using Realgud to debug source code
#+BEGIN_SRC emacs-lisp
  (use-package realgud)
#+END_SRC

** Shell connfig

Force open shell in the current buffer
#+BEGIN_SRC emacs-lisp
  (push (cons "\\*shell\\*" display-buffer--same-window-action) display-buffer-alist)
#+END_SRC

Add shell completion
#+BEGIN_SRC emacs-lisp
  (use-package bash-completion
    :init (bash-completion-setup))
(bash-completion-setup)
#+END_SRC

* Terminal

I use =multi-term= to manage my shell sessions. It's bound to =C-c t=.

#+BEGIN_SRC emacs-lisp
  (use-package multi-term
    :bind ("C-c t" . multi-term))
#+END_SRC

Use a login shell:

#+BEGIN_SRC emacs-lisp
  (setq multi-term-program-switches "--login")
#+END_SRC

** Go on
 I add a bunch of hooks to =term-mode=:

 - I'd like links (URLs, etc) to be clickable.
 - Yanking in =term-mode= doesn't quite work. The text from the paste appears in
   the buffer but isn't sent to the shell process. This correctly binds =C-y= and
   middle-click to yank the way we'd expect.
 - I bind =M-o= to quickly change windows. I'd like that in terminals, too.
 - I don't want to perform =yasnippet= expansion when tab-completing.

 #+BEGIN_SRC emacs-lisp
   (defun MattLu/term-paste (&optional string)
     (interactive)
     (process-send-string
			(get-buffer-process (current-buffer))
			(if string string (current-kill 0))))

   (add-hook 'term-mode-hook
             (lambda ()
               (goto-address-mode)
               (define-key term-raw-map (kbd "C-y") 'MattLu/term-paste)
               (define-key term-raw-map (kbd "<mouse-2>") 'MattLu/term-paste)
               (define-key term-raw-map (kbd "M-o") 'other-window)
               (setq yas-dont-activate t)))
 #+END_SRC

* Publishing and task management with Org-mode

** Display preferences

I like to see an outline of pretty bullets instead of a list of asterisks.

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :init
    (add-hook 'org-mode-hook #'org-bullets-mode))
#+END_SRC

I like seeing a little downward-pointing arrow instead of the usual ellipsis
(=...=) that org displays when there's stuff under a header.

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "⤵")
#+END_SRC

Use syntax highlighting in source blocks while editing.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Make TAB act as if it were issued in a buffer of the language's major mode.

#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

When editing a code snippet, use the current window rather than popping open a
new one (which shows the same information).

#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

Quickly insert a block of elisp:

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

Enable spell-checking in Org-mode.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'flyspell-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package org-pomodoro)
#+END_SRC
** Task and org-capture management

Store my org files in =~/org=, maintain an inbox in Dropbox, define the location
of an index file (my main todo list), and archive finished tasks in
=~/org/archive.org=.

#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/Documents/org")

  (defun org-file-path (filename)
    "Return the absolute address of an org file, given its relative name."
    (concat (file-name-as-directory org-directory) filename))

    ;(setq org-inbox-file "~/Dropbox/inbox.org") We can not access to Dropbox
  (setq org-index-file (org-file-path "index.org"))
  (setq org-gtd-file (org-file-path "gtd.org"))
  (setq org-notes-file (org-file-path "notes.org"))
  (setq org-archive-location
        (concat (org-file-path "archive.org") "::* From %s"))
  (setq org-default-notes-file (org-file-path "gtd.org"))
#+END_SRC


*** COMMENT Something we needn't yet
I use [[http://agiletortoise.com/drafts/][Drafts]] to create new tasks, format them according to a template, and
append them to an "inbox.org" file in my Dropbox. This function lets me import
them easily from that inbox file to my index.

#+BEGIN_SRC emacs-lisp
  (defun MattLu/copy-tasks-from-inbox ()
    (when (file-exists-p org-inbox-file)
      (save-excursion
        (find-file org-index-file)
        (goto-char (point-max))
        (insert-file-contents org-inbox-file)
        (delete-file org-inbox-file))))
#+END_SRC

*** Move on
I store all my todos in =~/org/index.org=, so I'd like to derive my agenda from
there.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (list org-directory))
#+END_SRC

set org-refile level deep to max 6

#+BEGIN_SRC emacs-lisp
  (setq org-refile-targets '((org-agenda-files . (:maxlevel . 6))))
#+END_SRC


Hitting =C-c C-x C-s= will mark a todo as done and move it to an appropriate
place in the archive.

#+BEGIN_SRC emacs-lisp
  (defun MattLu/mark-done-and-archive ()
    "Mark the state of an org-mode item as DONE and archive it."
    (interactive)
    (org-todo 'done)
    (org-archive-subtree))

  (define-key org-mode-map (kbd "C-c C-x C-s") 'MattLu/mark-done-and-archive)
#+END_SRC

Record the time that a todo was archived.

#+BEGIN_SRC emacs-lisp
  (setq org-log-done 'time)
#+END_SRC

**** TODO Capturing tasks

Define a few common tasks as capture templates. Specifically, I frequently:

- Record ideas for future blog posts in =~/org/blog-ideas.org=,
- Keep a running grocery list in =~/org/groceries.org=, and
- Maintain a todo list in =~/org/index.org=.

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(("n" "notes"
           entry
           (file+headline org-notes-file "Quick notes")
           "* %?\n %i\n %U"
           :empty-lines 1)

          ("g" "Groceries"
           checkitem
           (file (org-file-path "groceries.org")))

          ("v" "Vocabulary"
           table-line
           (file+headline (org-file-path "vocabulary.org") "Vocabulary")
           "| %^{English} | %^{Chinese} | %u|")

          ("l" "letters"
           entry
           (file+headline (org-file-path "vocabulary.org") "Letters")
           "* %?\n %i\n %U")

          ("L" "links"
           entry
           (file+headline org-notes-file "Links")
           "* TODO [#C] %?\n  %i\n %a \n %U"
           :empty-lines 1)

          ("s" "Code Snippet"
           entry
           (file (org-file-path "snippet.org"))
           "* %?\t%^g\n#+BEGIN_SRC %^{language}\n\n#+END_SRC")

          ("w" "work"
           entry
           (file+headline org-gtd-file  "Racobit")
           "* TODO [#A] %?\n  %i\n %U"
           :empty-lines 1)

          ("t" "Todo"
           entry
           (file+headline org-gtd-file "Workspace")
           "* TODO [#B] %?\n %i\n"
           :empty-lines 1)))
#+END_SRC


**** Agenda review

     list stuck projects
#+BEGIN_SRC emacs-lisp
      (setq org-stuck-projects
            '("TODO={.+}/-DONE" nil nil "SCHEDULED:\\|DEADLINE:"))
#+END_SRC

using priority to organize my life
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands
        '(("w" . "任务安排")
          ("wa" "重要且紧急的任务" tags-todo "+PRIORITY=\"A\"")
          ("wb" "重要且不紧急的任务" tags-todo "-Weekly-Monthly-Daily+PRIORITY=\"B\"")
          ("wc" "不重要且紧急的任务" tags-todo "+PRIORITY=\"C\"")
          ("p" . "项目安排")
          ("pw" tags-todo "PROJECT+WORK+CATEGORY=\"Racobit\"")
          ("pl" tags-todo "PROJECT+DREAM+CATEGORY=\"MattLu\"")
          ("W" "Weekly Review"
           ((stuck "") ;; review stuck projects as designated by org-stuck-projects
            (tags-todo "PROJECT") ;; review all projects (assuming you use todo keywords to designate projects)
            ))))
 #+END_SRC

**** Keybindings

Bind a few handy keys.

#+BEGIN_SRC emacs-lisp
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-cc" 'org-capture)
#+END_SRC


Hit =C-c g= to quickly open up my todo list.

#+BEGIN_SRC emacs-lisp
  (defun open-gtd-file ()
    "Open the master org TODO list."
    (interactive)
   ;; (MattLu/copy-tasks-from-inbox)
    (find-file org-gtd-file)
    (flycheck-mode -1)
    (end-of-buffer))

  (global-set-key (kbd "C-c g") 'open-gtd-file)
#+END_SRC


Hit =M-n= to quickly open up a capture template for a new todo.

#+BEGIN_SRC emacs-lisp
  (defun org-capture-todo ()
    (interactive)
    (org-capture :keys "t"))

;;  (global-set-key (kbd "C-c t d") 'org-capture-todo)
;;  (add-hook 'gfm-mode-hook
;;            (lambda () (local-set-key (kbd "M-n") 'org-capture-todo)))
;;  (add-hook 'haskell-mode-hook
;;            (lambda () (local-set-key (kbd "M-n") 'org-capture-todo)))
#+END_SRC

** Exporting

Allow export to markdown and beamer (for presentations).

#+BEGIN_SRC emacs-lisp
  (require 'ox-md)
  (require 'ox-beamer)
#+END_SRC

Allow =babel= to evaluate Emacs lisp, Ruby, dot, or Gnuplot code.

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (ruby . t)
     (dot . t)
     (gnuplot . t)))
#+END_SRC

Don't ask before evaluating code blocks.

#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

Associate the "dot" language with the =graphviz-dot= major mode.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))
#+END_SRC

Translate regular ol' straight quotes to typographically-correct curly quotes
when exporting.

#+BEGIN_SRC emacs-lisp
  (setq org-export-with-smart-quotes t)
#+END_SRC

**** Exporting to HTML

Don't include a footer with my contact and publishing information at the bottom
of every exported HTML document.

#+BEGIN_SRC emacs-lisp
  (setq org-html-postamble nil)
#+END_SRC

Exporting to HTML and opening the results triggers =/usr/bin/sensible-browser=,
which checks the =$BROWSER= environment variable to choose the right browser.
I'd like to always use Firefox, so:

#+BEGIN_SRC emacs-lisp
  (setenv "BROWSER" "safari")
#+END_SRC

**** Exporting to PDF

I want to produce PDFs with syntax highlighting in the code. The best way to do
that seems to be with the =minted= package, but that package shells out to
=pygments= to do the actual work. =pdflatex= usually disallows shell commands;
this enables that.

#+BEGIN_SRC emacs-lisp
  (setq org-latex-pdf-process
        '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

Include the =minted= package in all of my LaTeX exports.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)
#+END_SRC

**** COMMENT Exporting projects

I have a few Org project definitions that I maintain in a separate elisp file.

#+BEGIN_SRC emacs-lisp
  (load-file ".emacs.d/projects.el")
#+END_SRC

** TODO TeX configuration

I rarely write LaTeX directly any more, but I often export through it with
org-mode, so I'm keeping them together.

Automatically parse the file after loading it.

#+BEGIN_SRC emacs-lisp
  (setq TeX-parse-self t)
#+END_SRC

Always use =pdflatex= when compiling LaTeX documents. I don't really have any
use for DVIs.

#+BEGIN_SRC emacs-lisp
  (setq TeX-PDF-mode t)
#+END_SRC

Open compiled PDFs in =evince= instead of in the editor.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
        '(lambda ()
           (delete '("\\.pdf\\'" . default) org-file-apps)
           (add-to-list 'org-file-apps '("\\.pdf\\'" . "evince %s"))))
#+END_SRC

Enable a minor mode for dealing with math (it adds a few useful keybindings),
and always treat the current file as the "main" file. That's intentional, since
I'm usually actually in an org document.

#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (LaTeX-math-mode)
              (setq TeX-master t)))
#+END_SRC

* TODO COMMENT Daily checklist

There are certain things I want to do regularly. I store those in a checklist.
Because different things happen on different days, the checklist is an Org
document generated by a Ruby script.

Running =MattLu/today= either opens today's existing checklist (if it exists), or
renders today's new checklist, copies it into an Org file in =/tmp=, and opens
it.

#+BEGIN_SRC emacs-lisp
  (setq MattLu/checklist-script "~/bin/daily-checklist")

  (defun MattLu/today-checklist-filename ()
    "The filename of today's checklist."
    (concat "/tmp/daily-checklist-" (format-time-string "%Y-%m-%d") ".org"))

  (defun MattLu/today ()
    "Take a look at today's checklist."
    (interactive)
    (let ((filename (MattLu/today-checklist-filename)))
      (if (file-exists-p filename)
          (find-file filename)
        (progn
          (shell-command (concat MattLu/checklist-script " > " filename))
          (find-file filename)))))

  (global-set-key (kbd "C-c t") 'MattLu/today)
#+END_SRC

Open the checklist and my TODO list side-by-side:

#+BEGIN_SRC emacs-lisp
  (defun MattLu/dashboard ()
    (interactive)
    (delete-other-windows)
    (MattLu/today)
    (split-window-right)
    (open-index-file))

  (global-set-key (kbd "C-c d") 'MattLu/dashboard)
#+END_SRC

* Writing thesis

 Write raw LaTex document using [[https://www.gnu.org/software/auctex/][auctex]]

#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :defer t
    :ensure t
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil)
    (add-hook 'LaTeX-mode-hook 'visual-line-mode)
    (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
    (setq reftex-plug-into-AUCTeX t)
    (add-hook 'text-mode-hook 'turn-on-flyspell))
#+END_SRC


#+BEGIN_SRC emacs-lisp
 (use-package company-auctex
   :config
   (company-auctex-init))
#+END_SRC

** Set some usefull commands of latex

 #+BEGIN_SRC emacs-lisp
   (eval-after-load "tex"
     '(setq TeX-command-list
                   '(("XeLaTeX_SyncteX" "%`xelatex --synctex=1%(mode)%' %t" TeX-run-TeX nil
                      (latex-mode doctex-mode)
                      :help "Run XeLaTeX")
                  ;;   ("TeX" "%(PDF)%(tex) %`%S%(PDFout)%(mode)%' %t" TeX-run-TeX nil
                  ;;    (plain-tex-mode texinfo-mode ams-tex-mode)
                  ;;    :help "Run plain TeX")
                   ;;  ("LaTeX" "%`%l%(mode)%' %t" TeX-run-TeX nil
                   ;;   (latex-mode doctex-mode)
                   ;;   :help "Run LaTeX")
                     ("Makeinfo" "makeinfo %t" TeX-run-compile nil
                      (texinfo-mode)
                      :help "Run Makeinfo with Info output")
                     ("Makeinfo HTML" "makeinfo --html %t" TeX-run-compile nil
                      (texinfo-mode)
                      :help "Run Makeinfo with HTML output")
                     ("AmSTeX" "%(PDF)amstex %`%S%(PDFout)%(mode)%' %t" TeX-run-TeX nil
                      (ams-tex-mode)
                      :help "Run AMSTeX")
                     ("ConTeXt" "texexec --once --texutil %(execopts)%t" TeX-run-TeX nil
                      (context-mode)
                      :help "Run ConTeXt once")
                     ("ConTeXt Full" "texexec %(execopts)%t" TeX-run-TeX nil
                      (context-mode)
                      :help "Run ConTeXt until completion")
                     ("BibTeX" "bibtex %s" TeX-run-BibTeX nil t
                      :help "Run BibTeX")
                     ("View" "%V" TeX-run-discard-or-function nil t
                      :help "Run Viewer")
                     ("Print" "%p" TeX-run-command t t
                      :help "Print the file")
                     ("Queue" "%q" TeX-run-background nil t
                      :help "View the printer queue" :visible TeX-queue-command)
                     ("File" "%(o?)dvips %d -o %f " TeX-run-command t t
                      :help "Generate PostScript file")
                     ("Index" "makeindex %s" TeX-run-command nil t
                      :help "Create index file")
                     ("Check" "lacheck %s" TeX-run-compile nil
                      (latex-mode)
                      :help "Check LaTeX file for correctness")
                     ("Spell" "(TeX-ispell-document \"\")" TeX-run-function nil t
                      :help "Spell-check the document")
                     ("Clean" "TeX-clean" TeX-run-function nil t
                      :help "Delete generated intermediate files")
                     ("Clean All" "(TeX-clean t)" TeX-run-function nil t
                      :help "Delete generated intermediate and output files")
                     ("Other" "" TeX-run-command t t
                      :help "Run an arbitrary command")
                     ("Jump to PDF" "%V" TeX-run-discard-or-function nil t
                      :help "Run Viewer")
                     ("TeXcount" "texcount %s.tex" TeX-run-compile nil t
                      :help "Run texcount")
                     ) ))
 #+END_SRC

** Enable forward and inverse search

 #+BEGIN_SRC emacs-lisp
  (setq TeX-source-correlate-method (quote synctex))
  (setq TeX-source-correlate-mode t)
  (setq TeX-source-correlate-start-server t)
 #+END_SRC

** Set pdf viewer

 #+BEGIN_SRC emacs-lisp
   (setq TeX-view-program-selection  '((output-pdf "PDF Viewer")))
   (setq TeX-view-program-list
         '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))
 #+END_SRC


** Set [[https://www.gnu.org/software/auctex/reftex.html][reftex]]  References, labels, citations

 #+BEGIN_SRC emacs-lisp
   (use-package org-ref)
   (add-hook 'LaTeX-mode-hook 'turn-on-reftex) ; with Auctex Latex mode
   (add-hook 'latex-mode-hook 'turn-on-reftex) ; with Emacs latex mode
   (setq reftex-plug-into-AUCTeX t)
 #+END_SRC

* =dired=

Open media with the appropriate programs.

#+BEGIN_SRC emacs-lisp
  (use-package dired-open
    :config
    (setq dired-open-extensions
          '(("pdf" . "evince")
            ("mkv" . "vlc")
            ("mp4" . "vlc")
            ("avi" . "vlc"))))
#+END_SRC

These are the switches that get passed to =ls= when =dired= gets a list of
files. We're using:

- =l=: Use the long listing format.
- =h=: Use human-readable sizes.
- =v=: Sort numbers naturally.
- =A=: Almost all. Doesn't include "=.=" or "=..=".

#+BEGIN_SRC emacs-lisp
  (setq-default dired-listing-switches "-lhvA")
#+END_SRC

Use "j" and "k" to move around in =dired=.

Kill buffers of files/directories that are deleted in =dired=.

#+BEGIN_SRC emacs-lisp
  (setq dired-clean-up-buffers-too t)
#+END_SRC

Always copy directories recursively instead of asking every time.

#+BEGIN_SRC emacs-lisp
  (setq dired-recursive-copies 'always)
#+END_SRC

Ask before recursively /deleting/ a directory, though.

#+BEGIN_SRC emacs-lisp
  (setq dired-recursive-deletes 'top)
#+END_SRC

Open a file with an external program (that is, through =xdg-open=) by hitting
=C-c C-o=.

#+BEGIN_SRC emacs-lisp
  (defun dired-xdg-open ()
    "In dired, open the file named on this line."
    (interactive)
    (let* ((file (dired-get-filename nil t)))
      (call-process "xdg-open" nil 0 nil file)))

  (define-key dired-mode-map (kbd "C-c C-o") 'dired-xdg-open)
#+END_SRC

* Editing settings
** Quickly visit Emacs
configuration

I futz around with my dotfiles a lot. This binds =C-c e= to quickly open my
Emacs configuration file.

#+BEGIN_SRC emacs-lisp
  (defun MattLu/visit-emacs-config ()
    (interactive)
    (find-file "~/.emacs.d/configuration.org"))

  (global-set-key (kbd "C-c e") 'MattLu/visit-emacs-config)
#+END_SRC

** Always kill current buffer

Assume that I always want to kill the current buffer when hitting =C-x k=.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x k") 'MattLu/kill-current-buffer)
#+END_SRC

** Set up =helpful=

The =helpful= package provides, among other things, more context in Help
buffers.

#+BEGIN_SRC emacs-lisp
  (use-package helpful)
  (global-set-key (kbd "C-h f") #'helpful-callable)
  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)
#+END_SRC

** Look for executables in =/usr/local/bin=.

Add system path to emacs.

#+BEGIN_SRC emacs-lisp
  (MattLu/append-to-path "/usr/local/bin")
	(MattLu/append-to-path "/Library/TeX/texbin")
#+END_SRC

** Use =company-mode= everywhere

#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    (setq company-tooltip-limit 10)                      ; bigger popup window
    (setq company-idle-delay .3)                         ; decrease delay before autocompletion popup shows
    (setq company-echo-delay 0)                          ; remove annoying blinking
    (setq company-transformers '(company-sort-by-occurrence))) ; weight by frequency
#+END_SRC

Set TAB for complete cycle

#+BEGIN_SRC emacs-lisp
  (eval-after-load 'company
    '(progn
       (define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)
       (define-key company-active-map (kbd "<tab>") 'company-complete-common-or-cycle)))
#+END_SRC

** Always indent with spaces

Never use tabs. Tabs are the devil’s whitespace.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

** TODO Configure yasnippet

I keep my snippets in =~/.emacs/snippets/text-mode=, and I always want =yasnippet=
enabled.

 Add yasnippet support for all company backends TOO slowly for rtags
#+BEGIN_SRC emacs-lisp
;; (defvar company-mode/enable-yas
;;   "Enable yasnippet for all backends.")
;; (defun company-mode/backend-with-yas (backend)
;;   (if (or (not company-mode/enable-yas)
;;           (and (listp backend) (member 'company-yasnippet backend)))
;;       backend
;;     (append (if (consp backend) backend (list backend))
;;             '(:with company-yasnippet))))
;; (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
   :init
   (setq yas-snippet-dirs '("/home/man.lu/.emacs.d/snippets"))
   (yas-global-mode 1))
#+END_SRC

I /don’t/ want =ido= to automatically indent the snippets it inserts. Sometimes
this looks pretty bad (when indenting org-mode, for example, or trying to guess
at the correct indentation for Python).

#+BEGIN_SRC emacs-lisp
  (setq yas/indent-line nil)
#+END_SRC

** Configure =ido=

#+BEGIN_SRC emacs-lisp
  (use-package ido-completing-read+
    :config
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode 1)
    (ido-ubiquitous-mode 1)
    (setq ido-create-new-buffer 'always)) ; don't confirm to create new buffers

  (use-package flx-ido
    :config
     (flx-ido-mode 1)) ; better/faster matching

  (use-package ido-vertical-mode
    :config
    (ido-vertical-mode 1)
    (setq ido-vertical-define-keys 'C-n-and-C-p-only))
#+END_SRC

** Use =smex= to handle =M-x= with =ido=

#+BEGIN_SRC emacs-lisp
  (use-package smex
   :config
   (smex-initialize)
   :bind  ("M-x" . smex)
          ("M-X" . smex-major-mode-commands))
#+END_SRC

** Switch and rebalance windows when splitting

When splitting a window, I invariably want to switch to the new window. This
makes that automatic.

#+BEGIN_SRC emacs-lisp
  (defun MattLu/split-window-below-and-switch ()
    "Split the window horizontally, then switch to the new pane."
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun MattLu/split-window-right-and-switch ()
    "Split the window vertically, then switch to the new pane."
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))

  (global-set-key (kbd "C-x 2") 'MattLu/split-window-below-and-switch)
  (global-set-key (kbd "C-x 3") 'MattLu/split-window-right-and-switch)
#+END_SRC

** Mass editing of =grep= results

I like the idea of mass editing =grep= results the same way I can edit filenames
in =dired=. These keybindings allow me to use =C-x C-q= to start editing =grep=
results and =C-c C-c= to stop, just like in =dired=.

#+BEGIN_SRC emacs-lisp
  (eval-after-load 'grep
    '(define-key grep-mode-map
      (kbd "C-x C-q") 'wgrep-change-to-wgrep-mode))

  (eval-after-load 'wgrep
    '(define-key grep-mode-map
      (kbd "C-c C-c") 'wgrep-finish-edit))

  (setq wgrep-auto-save-buffer t)
#+END_SRC

** Configure =wrap-region=

#+BEGIN_SRC emacs-lisp
  (use-package wrap-region
    :config
    (wrap-region-global-mode t)
    (wrap-region-add-wrapper "/" "/" nil 'ruby-mode)
    (wrap-region-add-wrapper "`" "`" nil '(markdown-mode ruby-mode)))
#+END_SRC

** Split horizontally for temporary buffers

Horizonal splits are nicer for me, since I usually use a wide monitor. This is
handy for handling temporary buffers (like compilation or test output).

#+BEGIN_SRC emacs-lisp
  (defun MattLu/split-horizontally-for-temp-buffers ()
    (when (one-window-p t)
      (split-window-horizontally)))

  (add-hook 'temp-buffer-window-setup-hook
            'MattLu/split-horizontally-for-temp-buffers)
#+END_SRC

** Use projectile everywhere

#+BEGIN_SRC emacs-lisp

  (projectile-global-mode)
#+END_SRC

** Add a bunch of engines for =engine-mode=

Enable [[https://github.com/hrs/engine-mode][engine-mode]] and define a few useful engines.

#+BEGIN_SRC emacs-lisp
  (use-package engine-mode)

  (defengine duckduckgo
    "https://duckduckgo.com/?q=%s"
    :keybinding "d")

  (defengine github
    "https://github.com/search?ref=simplesearch&q=%s"
    :keybinding "g")

  (defengine google
    "https://www.google.com/search?ie=utf-8&oe=utf-8&q=%s")

  (defengine rfcs
    "https://pretty-rfc.herokuapp.com/search?q=%s")

  (defengine stack-overflow
    "https://stackoverflow.com/search?q=%s"
    :keybinding "s")

  (defengine wikipedia
    "https://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
    :keybinding "w")

  (defengine wiktionary
    "https://www.wikipedia.org/search-redirect.php?family=wiktionary&language=en&go=Go&search=%s")

  (defengine youtube
    "https://www.youtube.com/results?search_query=%s")

  (engine-mode t)
#+END_SRC

** Use multiple cursors



Set multiple cursors for better marker words

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
   :bind ("C-S-c C-S-c" . mc/edit-lines)
         ("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-previous-like-this)
         ("C-c C-<"  . mc/mark-all-like-this))
#+END_SRC

** Use expand region

Expand region increases the selected region by semantic units.
Just keep pressing the key until it selects what you want.

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
   :bind  ("C-c q" . er/expand-region))
#+END_SRC

** Use ace-jump

Use ace-jump-mode to quick jump to words or char

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :bind ("C-c j" . avy-goto-word-or-subword-1))
#+END_SRC

** windows switch

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :config
    (bind-key* "M-o" 'ace-window)
    (setq aw-scope 'frame)   ; only the windows of the current frame
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+END_SRC

** Workspace config

#+BEGIN_SRC emacs-lisp
  (use-package workgroups
    :diminish workgroups-mode
    :config
    (setq wg-prefix-key (kbd "C-c w"))
    (setq wg-morph-on nil)
    (workgroups-mode 1)
    (setq wg-mode-line-on nil)
    (wg-load "~/.emacs.d/workgroups"))
#+END_SRC
** COMMENT Workspace2 config

#+BEGIN_SRC emacs-lisp
  (use-package workgroups2
    :diminish workgroups-mode
    :init
    (setq wg-prefix-key (kbd "C-c w")
          wg-session-file "~/.emacs.d/workgroups2"
          wg-mode-line-display-on nil
          ;; What to do on Emacs exit / workgroups-mode exit?
          wg-emacs-exit-save-behavior           'save      ; Options: 'save 'ask nil
          wg-workgroups-mode-exit-save-behavior 'save)
    (workgroups-mode 1))
#+END_SRC

* Set custom keybindings

Just a few handy functions.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-/") 'hippie-expand)
#+END_SRC

Remap when working in terminal Emacs.

#+BEGIN_SRC emacs-lisp
  (define-key input-decode-map "\e[1;2A" [S-up])
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq ns-right-option-modifier 'super)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-_") 'undo)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (bind-keys*
   ("M-s" . select-frame-by-name)
   ("C-c n" . set-frame-name))
#+END_SRC
